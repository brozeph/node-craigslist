{"version":3,"sources":["web.js"],"names":["debug","DEFAULT_MAX_REDIRECT_COUNT","DEFAULT_RETRY_COUNT","DEFAULT_TIMEOUT","EVENT_REDIRECT","EVENT_REQUEST","EVENT_RESPONSE","FIRST_TRY","HTTP_ERROR_CODE_THRESHHOLD","HTTP_ERROR_CODE_RETRY_THRESHHOLD","HTTP_PROXY_REQUIRED","HTTP_REDIRECT_CODE_PERM","HTTP_REDIRECT_CODE_TEMP","HTTP_REDIRECT_NEW_CODE_PERM","HTTP_REDIRECT_NEW_CODE_TEMP","REQUEST_OPTIONS","SECURE_PROTOCOL_RE","_augmentRequestOptions","options","augmented","self","forEach","field","value","Validation","coalesce","settings","isEmpty","maxRetries","rawStream","timeout","path","pathname","_exec","data","tryCount","callback","undefined","headers","exec","redirectCount","Promise","resolve","reject","JSON","stringify","Buffer","byteLength","json","emit","makeRequest","req","secure","request","res","chunks","context","statusCode","redirect","some","code","err","Error","response","location","redirectUrl","parse","host","hostname","method","protocol","test","setImmediate","setEncoding","on","chunk","push","once","body","join","retry","length","setTimeout","abort","write","end","promiseOrCallback","Request","EventEmitter"],"mappings":"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","file":"web.js","sourcesContent":["'use strict'\n\nimport 'babel-polyfill';\nimport 'source-map-support/register';\nimport core from './core.js';\nimport debugLog from 'debug';\nimport events from 'events';\nimport http from 'http';\nimport https from 'https';\nimport url from 'url';\n\nconst\n\tdebug = debugLog('craigslist'),\n\tDEFAULT_MAX_REDIRECT_COUNT = 5,\n\tDEFAULT_RETRY_COUNT = 3,\n\tDEFAULT_TIMEOUT = 30000,\n\tEVENT_REDIRECT = 'redirect',\n\tEVENT_REQUEST = 'request',\n\tEVENT_RESPONSE = 'response',\n\tFIRST_TRY = 1,\n\tHTTP_ERROR_CODE_THRESHHOLD = 400,\n\tHTTP_ERROR_CODE_RETRY_THRESHHOLD = 500,\n\t// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\n\tHTTP_PROXY_REQUIRED = 305,\n\tHTTP_REDIRECT_CODE_PERM = 301,\n\tHTTP_REDIRECT_CODE_TEMP = 302,\n\tHTTP_REDIRECT_NEW_CODE_PERM = 308,\n\tHTTP_REDIRECT_NEW_CODE_TEMP = 307,\n\tREQUEST_OPTIONS = [\n\t\t'agent',\n\t\t'auth',\n\t\t'family',\n\t\t'headers',\n\t\t'host',\n\t\t'hostname',\n\t\t'json',\n\t\t'localAddress',\n\t\t'maxRetries',\n\t\t'method',\n\t\t'path',\n\t\t'pathname',\n\t\t'port',\n\t\t'protocol',\n\t\t'query',\n\t\t'rejectUnauthorized',\n\t\t'maxRetries',\n\t\t'rawStream',\n\t\t'secure',\n\t\t'socketPath',\n\t\t'timeout'],\n\tSECURE_PROTOCOL_RE = /^https/i;\n\nfunction _augmentRequestOptions (options) {\n\tlet\n\t\taugmented = {},\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\t// ensure options exist\n\toptions = options || {};\n\n\t// apply settings from Ctor\n\tREQUEST_OPTIONS.forEach((field) => {\n\t\tlet value = core.Validation.coalesce(options[field], self.settings[field]);\n\n\t\tif (!core.Validation.isEmpty(value)) {\n\t\t\tdebug(\n\t\t\t\t'request %s will be set to %s (options = %s, settings = %s)',\n\t\t\t\tfield,\n\t\t\t\tvalue,\n\t\t\t\toptions[field],\n\t\t\t\tself.settings[field]);\n\t\t\taugmented[field] = value;\n\t\t}\n\t});\n\n\t// ensure maxRetries is applied if one is not supplied\n\taugmented.maxRetries = core.Validation.coalesce(\n\t\taugmented.maxRetries,\n\t\tDEFAULT_RETRY_COUNT);\n\n\t// ensure rawStream setting is applied if not supplied\n\taugmented.rawStream = core.Validation.isEmpty(augmented.rawStream) ?\n\t\tfalse :\n\t\taugmented.rawStream;\n\n\t// ensure default timeout is applied if one is not supplied\n\taugmented.timeout = core.Validation.coalesce(augmented.timeout, DEFAULT_TIMEOUT);\n\n\t// create `path` from pathname and query.\n\taugmented.path = core.Validation.coalesce(augmented.path, augmented.pathname);\n\n\treturn augmented;\n}\n\nfunction _exec (options, data, tryCount, callback) {\n\tif (typeof data === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = data;\n\t\t/*eslint no-undefined:0*/\n\t\tdata = undefined;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tif (typeof tryCount === 'function' && core.Validation.isEmpty(callback)) {\n\t\tcallback = tryCount;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tdata = data || '';\n\toptions.headers = options.headers || {};\n\ttryCount = tryCount || FIRST_TRY;\n\n\tlet\n\t\texec,\n\t\tredirectCount = 0,\n\t\t/*eslint no-invalid-this:0*/\n\t\tself = this;\n\n\texec = new Promise(function (resolve, reject) {\n\t\tif (typeof data !== 'string') {\n\t\t\tdata = JSON.stringify(data);\n\t\t}\n\n\t\t// apply content length header\n\t\toptions.headers['Content-Length'] = Buffer.byteLength(data);\n\n\t\t// apply application/json header if appropriate\n\t\tif (!options.rawStream && options.json && !options.headers['Content-Type']) {\n\t\t\toptions.headers['Content-Type'] = 'application/json';\n\t\t}\n\n\t\t// provide request event\n\t\tif (self.emit) {\n\t\t\tself.emit(EVENT_REQUEST, options);\n\t\t}\n\n\t\tlet makeRequest = function () {\n\t\t\tdebug('establishing request with options: %o', options);\n\t\t\tlet req = (options.secure ? https : http).request(\n\t\t\t\toptions,\n\t\t\t\t(res) => {\n\t\t\t\t\tlet\n\t\t\t\t\t\tchunks = [],\n\t\t\t\t\t\tcontext = {\n\t\t\t\t\t\t\theaders : res.headers,\n\t\t\t\t\t\t\tstatusCode : res.statusCode\n\t\t\t\t\t\t},\n\t\t\t\t\t\tredirect = [\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_CODE_TEMP,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_PERM,\n\t\t\t\t\t\t\tHTTP_REDIRECT_NEW_CODE_TEMP\n\t\t\t\t\t\t].some((code) => (code === context.statusCode));\n\n\t\t\t\t\t// provide response event (as there are response headers)\n\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\tself.emit(EVENT_RESPONSE, context);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.statusCode === HTTP_PROXY_REQUIRED) {\n\t\t\t\t\t\tlet err = new Error('proxy server configuration required');\n\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\tdebug('error: proxy server required: %o', err);\n\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t}\n\n\t\t\t\t\t// check for HTTP redirect\n\t\t\t\t\tif (redirect) {\n\t\t\t\t\t\tif (core.Validation.isEmpty(context.headers.location)) {\n\t\t\t\t\t\t\tlet err = new Error('redirect requested with no location');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: missing redirect header: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (redirectCount >= DEFAULT_MAX_REDIRECT_COUNT) {\n\t\t\t\t\t\t\tlet err = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.response = context;\n\n\t\t\t\t\t\t\tdebug('error: exceeded max number of redirects: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// remap options and redirect to supplied URL\n\t\t\t\t\t\tlet redirectUrl = url.parse(context.headers.location);\n\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\thost : redirectUrl.host || options.host || options.hostname,\n\t\t\t\t\t\t\tmethod : options.method,\n\t\t\t\t\t\t\tpath : redirectUrl.path,\n\t\t\t\t\t\t\tpathname : redirectUrl.pathname,\n\t\t\t\t\t\t\trawStream : options.rawStream,\n\t\t\t\t\t\t\tsecure : (redirectUrl.protocol ?\n\t\t\t\t\t\t\t\tSECURE_PROTOCOL_RE.test(redirectUrl.protocol) :\n\t\t\t\t\t\t\t\toptions.secure)\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\t\tredirectCount ++;\n\n\t\t\t\t\t\t// emit redirect event\n\t\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\t\tself.emit(EVENT_REDIRECT, options);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\t\treturn setImmediate(makeRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\t// for content-api requests (or other raw binary data requests)\n\t\t\t\t\t// rawStream may be set to true - in the event of this, return\n\t\t\t\t\t// the response directly\n\t\t\t\t\tif (options.rawStream) {\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: unable to process response: %o', context.statusCode);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('returning response as stream');\n\n\t\t\t\t\t\treturn resolve(res);\n\t\t\t\t\t}\n\n\t\t\t\t\t// standard API requests flow through below...\n\t\t\t\t\tres.setEncoding('utf-8');\n\n\t\t\t\t\tres.on('data', (chunk) => (chunks.push(chunk)));\n\n\t\t\t\t\tres.once('end', () => {\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tbody = chunks.join(''),\n\t\t\t\t\t\t\tretry =\n\t\t\t\t\t\t\t\tcontext.statusCode >= HTTP_ERROR_CODE_RETRY_THRESHHOLD &&\n\t\t\t\t\t\t\t\ttryCount <= options.maxRetries;\n\n\t\t\t\t\t\t// attempt to parse the body\n\t\t\t\t\t\tif (typeof body === 'string' && body.length && options.json) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\t\tdebug('error: unable to parse JSON response: %o', err);\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle retry if error code is above threshhold\n\t\t\t\t\t\tif (retry) {\n\t\t\t\t\t\t\tdebug(\n\t\t\t\t\t\t\t\t'retry: response status code: %o',\n\t\t\t\t\t\t\t\tcontext.statusCode);\n\t\t\t\t\t\t\ttryCount += 1;\n\t\t\t\t\t\t\treturn makeRequest();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle other response errors\n\t\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\tlet err = new Error('resource not found');\n\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: resource not found: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdebug('successfully completed request');\n\n\t\t\t\t\t\t// resolve the request as complete\n\t\t\t\t\t\treturn resolve(body || '');\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\treq.on('error', (err) => {\n\t\t\t\tdebug('error: unable to establish connection: %o', err);\n\n\t\t\t\t// retry if below retry count threshhold\n\t\t\t\tif (tryCount <= options.maxRetries) {\n\t\t\t\t\tdebug(\n\t\t\t\t\t\t'retry: %d retries remaining',\n\t\t\t\t\t\toptions.maxRetries - tryCount);\n\t\t\t\t\ttryCount += 1;\n\t\t\t\t\treturn makeRequest();\n\t\t\t\t}\n\n\t\t\t\treturn reject(err)\n\t\t\t});\n\n\t\t\t// timeout the connection\n\t\t\tif (options.timeout) {\n\t\t\t\tdebug('setting timeout value to %o', options.timeout);\n\t\t\t\treq.setTimeout(options.timeout, req.abort);\n\t\t\t}\n\n\t\t\t// write data to the connection\n\t\t\tif (data) {\n\t\t\t\tdebug('writing %d bytes of data', options.headers['Content-Length']);\n\t\t\t\treq.write(data);\n\t\t\t}\n\n\t\t\t// signal end of request data\n\t\t\treq.end();\n\t\t}\n\n\t\t// do it!\n\t\tmakeRequest();\n\t});\n\n\treturn core.Validation.promiseOrCallback(exec, callback);\n}\n\nexport class Request extends events.EventEmitter {\n\tconstructor (settings) {\n\t\tsuper();\n\t\tthis.settings = settings || {};\n\t}\n\n\t/*\n\tdelete (options, callback) {\n\t\tdebug('performing DELETE (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'DELETE';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\tget (options, callback) {\n\t\tdebug('performing GET (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'GET';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\n\tgetRequestOptions (options) {\n\t\treturn this::_augmentRequestOptions(options);\n\t}\n\n\t/*\n\thead (options, callback) {\n\t\tdebug('performing HEAD (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'HEAD';\n\n\t\treturn this::_exec(options, callback);\n\t}\n\t//*/\n\n\t/*\n\tpost (options, data, callback) {\n\t\tdebug('performing POST (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'POST';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n\n\t/*\n\tput (options, data, callback) {\n\t\tdebug('performing PUT (%o)', options);\n\t\toptions = this::_augmentRequestOptions(options);\n\t\toptions.method = 'PUT';\n\n\t\treturn this::_exec(options, data, callback);\n\t}\n\t//*/\n}\n\nexport default { Request }\n"]}